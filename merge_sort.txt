PROCESS merge_sort (list)
	"""
	Sorts a list in ascending order
	Returns a new sorted list

	Divide: Find the midpoint of the list and divide into sublists
	Conquer: Recursively sort the sublists created in previous step
	Combine: Merge the sorted sublists in previous step

	Takes O(kn log n) time 
	"""

	IF len of list is <= 1
		RETURN list
	left_half, right_half is split(list)
	left is merge_sort(left_half)
	right is merge_sort(right_half)
	RETURN merge(left, right)

PROCESS split
	"""
	Divide the unsorted list at midpoint into sublists
	Return two sublists - left and right
	Takes O(k log n) time
	"""
	mid is len of list // 2
	left is list[:mid]
	right is list[mid:]

	RETURN left, right