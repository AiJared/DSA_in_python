# Create the Node
CLASS Node
	PROCESS init (self and data)
		# referencing to the next node
		ASSIGN None to self.next
		# referencing to the previous node
		ASSIGN None to self.prev
		ASSIGN data to self.data

CLASS DoublyLinkedList(inherit Node)
	PROCESS init (self and data)
		super().init(data) # calling the super constructor

	PROCESS traverse(head)
		"""
		Traverse through the list as you print its elements
		"""
		ASSIGN head to current
		WHILE at current
			# print current node's data
			PRINT (current.data,end=" <-> ")
			# Go to the next node
			ASSIGN current.next to current
		# Print None if the list is empty
		PRINT ("None")

	PROCESS insert_at_the_beginning(head and data)
		"""
		Inserting new data at the beginning of the list
		"""
		Create Node(data) then ASSIGN it to new_node
		ASSIGN head to new_node.data
		IF head exits
			ASSIGN new_node to head.prev
		RETURN new_node

	PROCESS insert_before_node(node and data)
		"""
		Insert a node before a given node in a doubly linked list
		"""
		IF node is None
			PRINT ("Error: The given node is None")
			RETURN
		create Node(data) and ASSIGN it to new_node
		ASSIGN node.pre to new_node.prev
		ASSIGN node to new_node.next

		IF node.prev exists
			then ASSIGN new_node to node.pre.next
		ASSIGN new_node to node.prev
