CLASS Node

	"""A class for creating a node object in a singly linked list"""

	SET data to NONE
	SET next node to NONE

	PROCESS INIT with self and data
		SET self data to NONE

	PROCESS REPR with self
		RETURN Node data as self data

CLASS Singly Linked List (Inherit CLASS Node)
	
	PROCEES INIT with self
		SET self head to NONE

	
	PROCESS isempty with self
		"""A function to check if the list is empty"""
		
		RETURN self head is equal to NONE

	PROCESS size with self
		"""A function to calculate the size of the list"""
		
		SET current to self head
		SET count to zero
		
		WHILE at current
			INCREASE count by 1
			then SET current to current's next node
		RETURN count

	PROCESS add with self and data
		"""A function to add a node at the beginning of the list"""
		
		SET new node to CLASS Node's data object
		SET new node's next node as self head
		SET self head as new node

	PROCESS search with self and key
		"""This is a function to search for the first node containing the
		the data that matches the key in a linked list. It either returns 
		the node or none if the node is not found"""
		
		SET current to self head

		WHILE at current
			IF current's data is equal to the key
				then RETURN current
			ELSE
				SET current to current's next node

		RETURN None
	
	PROCESS insert with self, data and index
		"""Inserts new Node containing data at index position
		Insertion takes O(1) but finding the node at the insertion
		point takes O(n) time. So it takes overall O(n) time.
		
		IF index is equal to 0
			then self add data
		
		IF index > 0
			SET new to Node's data object
			SET position to index
			SET current to self head

			WHILE position > 1
				SET current to Node's next node object
				DECREASE position by 1
			SET previous node to current
			SET next node to current's next node

			SET previous node's next node to new
			SET new's next node to next node

	PROCESS remove with self and key
		"""Removes the node containing data that matches the key 
		and returns the node or none if the key doesn't have a match
		Takes linear time"""
		
		SET current to self head
		SET previous to None
		SET found to False

		WHILE at current and not found
			IF current's data equals key and current is self's head
				then found is True
				SET self's head to current's next node
			ELSE IF current's data equals the key
				then also found is True
				SET previous' next node to current's next node
			ELSE
				SET previous to current
				SET current to current's next node
		RETURN current	


	PROCESS repr with self
		"""Returns a string representation of the list
		Takes linear time"""

		SET nodes to an empty list
		SET current to self head

		WHILE at current
			IF current is self head
				nodes APPEND "[Head: %s]" % to current's data
			ELSE IF current's next node is NONE
				nodes append "[Tail: %s]" % to current's data
			ELSE
				nodes append "[%s]" % to current's data
			
			SET current to current's next_node
		
		RETURN '->' joined nodes
 
				
	