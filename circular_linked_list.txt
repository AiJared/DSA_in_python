# Representing a circular linked list in Python
CLASS Node
	# Constructor
	PROCESS init(self and data)
		# Data stored in the node
		ASSIGN data to self.data
		# reference to the next node in the circular linked list
		ASSIGN None to self.next

CLASS CircularLinkedList
	PROCESS init(self)
		# Intialize an empty circular linked list with head
		# pointer pointing to None
		ASSIGN None to self.head

	PROCESS traverse(self)
		# Traverse and display the elements of the circular linked list
		IF not self.head # If head does not exist
			PRINT ("The circular linked list is empty")
			RETURN 
		ASSIGN self.head to current
		WHILE True
			PRINT (current.data, end=" -> ")
			ASSIGN current.next to current
			IF current equals self.head
				# Break the loop when we reach the head again
				break

	PROCESS insert_at_beginning(self and data)
		# Insert a new node with data at the specified position in the list
		create a Node(data) and ASSIGN it to new_node
		ASSIGN self.head to new_node.next
		ASSIGN new_node to self.head

	PROCESS insert_at_position(self, position, data)
		"""
		Insert a new node with data at the specified index position
		"""
		create Node(data) and ASSIGN it to new_node
		# check if the position is valid
		IF position is less than 0
			PRINT ("Invalid position!")
			RETURN
		# If the position is 0, insert the new node at the head 
		IF position equals 0
			ASSIGN self.head to new_node.next
			ASSIGN new_node to self.head
			RETURN

		ASSIGN self.head to current
		count is 0
		# Traverse the list until the node before the specified position
		WHILE count is less than position -1 and current
			then current is current.next
			INCREASE count with 1
		
		# If the position is out of range, print an error message
		IF not current
			PRINT ("Position is out of range.")
			RETURN
		# Insert the new node at the specified position
		new_node.next is current.next
		current.next is new_node

	PROCESS append(self and data)
		# Append a new node with data to the end of the list
		new_node is Node(data)
		IF not self.head # if head does not exist
			# if the list is empty, make the new node the head
			self.head is new_node
			RETURN 
		current is self.head
		
		WHILE there is current.next
			# Traverse the list until the last node is reached.
			current is current.next
		# Assign the new node as the next node of the last node
		current.next is new_node
	
	PROCESS delete_at_beginning(self)
		IF not self.head # If the head does not exist
			PRINT("Circular linked list is empty")
			RETURN

		# If there is only one node in the list
		IF self.next equals self.head
			self.head is None
			RETURN

		current is self.head
		WHILE current.next is not equal to self.head
			THEN current is current.next

		# Update the last node to point to the second node
		current.next is self.head.next

		# Update the head to point to the second node
		self.head is self.head.next