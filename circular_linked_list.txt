# Representing a circular linked list in Python
CLASS Node
	# Constructor
	PROCESS init(self and data)
		# Data stored in the node
		ASSIGN data to self.data
		# reference to the next node in the circular linked list
		ASSIGN None to self.next

CLASS CircularLinkedList
	PROCESS init(self)
		# Intialize an empty circular linked list with head
		# pointer pointing to None
		ASSIGN None to self.head

	PROCESS traverse(self)
		# Traverse and display the elements of the circular linked list
		IF not self.head # If head does not exist
			PRINT ("The circular linked list is empty")
			RETURN 
		ASSIGN self.head to current
		WHILE True
			PRINT (current.data, end=" -> ")
			ASSIGN current.next to current
			IF current equals self.head
				# Break the loop when we reach the head again
				break

	PROCESS insert_at_beginning(self and data)
		# Insert a new node with data at the specified position in the list
		create a Node(data) and ASSIGN it to new_node
		ASSIGN self.head to new_node.next
		ASSIGN new_node to self.head